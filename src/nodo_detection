#!/usr/bin/env python
# -*- coding: utf-8 -*-
import roslib
import rospy
import math
import cv2
import numpy as np
np.seterr(divide='ignore', invalid='ignore')
import time
import os
import evaluation as eva
import regression as reg
import statistics
import ros_numpy
import open3d as o3d
import struct
import pandas as pd
import seaborn as sb
from sensor_msgs.msg import LaserScan
from sensor_msgs.msg import PointCloud2, PointField
from std_msgs.msg import Float32MultiArray
from math import pi
from datetime import datetime
from email.header import Header
from sensor_msgs import point_cloud2 as pc
from open3d.open3d.geometry import voxel_down_sample,estimate_normals

ang=45 
tprom = 3
pm=0
datos_lidar=np.zeros(((ang*2), 2),dtype=float)
vecr = np.zeros(((ang*2), tprom),dtype=float)
param_tras = np.zeros(((2), tprom),dtype=float)
verif = 0
conteo  = 0
tiempo_inicial = 0
xt = 0
yt = 0
zt = 0
xo = 0
yo = 0
zo = 0
inic_msg = []
inic_sec = False
inic_tot = False
zona = [0,0,0,0]
vx_m = 0.1
thres = 0.4
xeje = 400
yeje = 500
data_orb = [0,0,0,0,0,0]
r_ant =0

class PRE_PROCESAMIENTO(object):  

  def __init__(self):
     self.pub_est = rospy.Publisher("/point_cloud_reduced", PointCloud2, queue_size=4)
     self.sub = rospy.Subscriber('camera/scan', LaserScan, self.Vector_LaserScan)

  def ptcloud2(self, msg):
     global inic_msg
     global inic_sec
     global inic_tot
     inic_sec = True
     inic_tot = True
     inic_msg = msg    
     
  def Vector_LaserScan(self, msg):
    global inic_sec
    global inic_tot
    inic_sec = True  
    cont_kn = 1 
    while inic_sec:
        inic_sec = False
        self.sub_kin = rospy.Subscriber("/camera/depth_registered/points" , PointCloud2, self.ptcloud2)
    self.angle_min = msg.angle_min
    self.angle_increment = msg.angle_increment
    self.ranges = msg.ranges
    if inic_tot:
     global inic_msg
     global ang
     global pm
     global datos
     global conteo
     global tiempo_inicial
     global zona
     global vx_m
     global thres


     
    
     


     
     t_est_ini = time.time() 
     datos_ld2 = self.vector_distancia()
     conteo += 1
     datos_ld_cl = eva.interpolacion(datos_ld2)
     datos_ld_tr = datos_ld_cl
     datos_pro = self.promedio_movil(datos_ld_tr,self.angle_min, self.angle_increment)
     self.act_pm()
     #df = pd.DataFrame(datos_ld2)##Datos a excel
     #df.to_excel('datos_promedio_LIDAR_'+str(conteo)+'.xlsx')#datos a excel

     ''' deteccion de objeto dinÃ¡mico '''
     zona = reg.deteccion_dinamico(datos_pro,conteo,None,zona, thres)
      #print("zona----NDEC", zona)
     m_xyz = 0
     m_xyz1 = 0 
     m_din = 0
     m_est = 0
     t_rec = 0
     pos_xyz = [0,0,0]
     evento = "static"
     ang_max = self.angle_min+ ((90-zona[1]+zona[3])*self.angle_increment)+20
     ang_min = self.angle_min+ ((90-zona[0]-zona[3])*self.angle_increment)-20 
     point_data = [[ang_max,ang_min, vx_m], [0,0,0], [0,0,0]]
     t_est = time.time()-t_est_ini
     if conteo>5:  
        negativo_xyz = ros_numpy.point_cloud2.pointcloud2_to_xyz_array(inic_msg) 
        size_pcl_in = len(negativo_xyz)
        negativo_xyz[:,[1,2,0]] = negativo_xyz[:,[0,1,2]]
        negativo_xyz[:,1] = -negativo_xyz[:,1]
        negativo_xyz[:,2] = -negativo_xyz[:,2]
        m_xyz = len(negativo_xyz)
        t_est = time.time()-t_est_ini 
        
        t_vx_ini = time.time()
        out_pcd = o3d.geometry.PointCloud()    
        out_pcd.points = o3d.utility.Vector3dVector(negativo_xyz)
        pcd_down = voxel_down_sample(out_pcd, voxel_size=vx_m)
        negativo_xyz = np.asarray(pcd_down.points) 
        size_redu = len(negativo_xyz)
        t_vx = time.time()-t_vx_ini
        
        t_pc2_ini = time.time()
        negativo_xyz = np.concatenate(( negativo_xyz, point_data), axis=0)
        pc_est = self.procesamiento_depth(negativo_xyz)
        self.pub_est.publish(pc_est)
        t_pc2 = time.time() - t_pc2_ini
        
        t_gp_ini = time.time()

        tiempo_final = time.time()
        resta_time = tiempo_final-tiempo_inicial
        tiempo_inicial = tiempo_final 
        t = datetime.now()
        hour = str(t.minute)+str(':')+str(t.second)+str(':')+str(t.microsecond)
        print('Time :', hour,conteo,zona)
 
       
  def movimiento(self, y,z,x):
     p = [[y],[z],[x]]
     global xt
     global yt
     global zt
     global xo
     global yo
     global zo
     mz = [[np.cos(zo),-np.sin(zo),0],
           [np.sin(zo), np.cos(zo),0],
           [         0,          0,1]]
           
     mx = [[ np.cos(yo),0,np.sin(yo)],
           [          0,1,         0],
           [-np.sin(yo),0, np.cos(yo)]]
           
     my = [[1,          0,          0],
           [0, np.cos(xo),-np.sin(xo)],
           [0, np.sin(xo), np.cos(xo)]]
     p = np.dot(mz,p)  
     p = np.dot(my,p)    
     p = np.dot(mx,p)            
     x = p[0]+xt
     y = p[1]+yt
     z = p[2]+zt
     return(x,y,z)
         
  def procesamiento_depth(self, pcl_total):
     points = []
     for i in range(len(pcl_total)):
            x = pcl_total[i][0]
            y = pcl_total[i][1]
            z = pcl_total[i][2]
            r = 0
            g = 0
            b = 255
            a = 255
            rgb = struct.unpack('I', struct.pack('BBBB', r, g, b, a))[0]
            pt = [x, y, z, rgb]
            points.append(pt)
     fields = [PointField('x', 0, PointField.FLOAT32, 1),
          PointField('y', 4, PointField.FLOAT32, 1),
          PointField('z', 8, PointField.FLOAT32, 1),
          PointField('rgba', 12, PointField.UINT32, 1),
          ]
     header = Header()
     header.frame_id = "map"
     pc2 = pc.create_cloud(header, fields, points)
     pc2.header.stamp = rospy.Time.now()
     return(pc2)   

  def promedio_movil(self,r_date,angulo_inicial, angulo_incremento):
     global pm
     global vecr
     global tprom
     global data_orb
     global r_ant 
     datos_pro = []
     ra = pd.DataFrame(vecr, columns=['r1', 'r2','r3'])
     r=np.sqrt((data_orb[0]**2)+(data_orb[1]**2)+(data_orb[2]**2))
     ra = ra-r+r_ant
     r_ant = r
     vecr = np.array(ra)
     for i in range(len(r_date)):
        vecr[i][pm]=r_date[i][0]
        vect_pr=vecr[i,:].sum() /tprom
        alfa = angulo_inicial+ (i*angulo_incremento)
        datos_pro.append([vect_pr,statistics.stdev(vecr[i,:]),alfa])
     return(datos_pro)

  def vector_distancia(self):
     global cont
     global data_orb
     other = 90+ang
     datos_ld = []
     for i in range(ang*2):
       r,alfa = self.profundidad(i, other)
       if r<=3.3:
          datos_ld.append([ r,alfa])
       else:
          datos_ld.append([ 4,alfa])
             
     self.angle_min =datos_ld[0][1]
     return(datos_ld)
     
  def profundidad(self,i,other):
    rot = 180
    tet = other+i+rot
    alfa = self.angle_min + (self.angle_increment * (tet))
    r = self.ranges[other+i]
    return(r,alfa)

  def act_pm(self):
     global pm
     global tprom
     if pm < (tprom-1):
       pm = pm + 1 
     else:
       pm = 0      
     
  def marco_refe(self, datos):
       global xt
       global yt
       datos_ld = []
       for i in range(int (ang*2)):
         r = datos[i][0]
         alf = datos[i][1]
         datos_ld.append( self.traslacion( r, alf, xt, yt))
       param_tras [0][pm]= xt
       param_tras [1][pm]= yt
       return(datos_ld)   

          
  def traslacion(self, ri, alfi, xt, yt):
       y=(((math.sin(alfi))*ri))
       x=(((math.cos(alfi))*ri))
       x=float(x)+float(xt)
       y=float(y)+float(yt)
       r=np.sqrt((x**2)+(y**2))
       alf=math.atan(y/x)
       if alf < 0:
          alf = np.pi+alf 
       return(r,alf) 

if __name__=='__main__':     
    #os.makedirs('/datos', exist_ok=True)
    #os.makedirs('/datos/cloud', exist_ok=True) 
    rospy.init_node('nodo_detection')
    instancia_pre_procesamiento = PRE_PROCESAMIENTO()
    rospy.loginfo("Detection_node")
    cv2.destroyAllWindows()
    rospy.spin()














