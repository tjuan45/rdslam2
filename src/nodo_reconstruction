#!/usr/bin/env python
# -*- coding: utf-8 -*-
import roslib
import rospy
import math
import sys
import cv2
import numpy as np
np.seterr(divide='ignore', invalid='ignore')
import matplotlib.pyplot as plt
import cv_bridge
import time
import os
import ros_numpy
from sensor_msgs import point_cloud2 as pc
from sensor_msgs.msg import PointCloud2, PointField
import open3d as o3d
import struct
from email.header import Header
import time
import pandas as pd

vx_m = 0.1
xyz_point_ant = np.zeros((1,3), dtype=object)
cont = 0
tiempo_inicial = 0
tope = 2
xt = 0
yt = 0
zt = 0
data_orb = [0,0,0,0,0,0]

class RECONSTRUCCION(object):  

  def __init__(self):
     self.pub_rec = rospy.Publisher("/point_cloud_reconstruction", PointCloud2, queue_size=8)
     self.sub_kin = rospy.Subscriber("/point_cloud_segmentation" , PointCloud2, self.ptcloud2)
          
  def ptcloud2(self, msg):  
     global xyz_point_ant
     global cont
     global tope
     global xt
     global yt
     global zt
     global size_xyz
     global xeje
     global data_orb 
     negativo_xyz = ros_numpy.point_cloud2.pointcloud2_to_xyz_array(msg)
     m_xyz_in = len(negativo_xyz)
     if m_xyz_in !=0:
        data_orb[0],data_orb[1],data_orb[2] = negativo_xyz[-5]
        data_orb[3],data_orb[4],data_orb[5] = negativo_xyz[-4]
        min_detec = negativo_xyz[-2]
        max_detec = negativo_xyz[-1]
        negativo_xyz =negativo_xyz[:-2,0:3]

        pcl_total = self.unir_pcd(xyz_point_ant , negativo_xyz, 0, 1)
        pcl_total_dt = pd.DataFrame(pcl_total, columns=['x', 'y','z'])
        pcl_total_dt = pcl_total_dt*100
        pcl_total_dt = pcl_total_dt/100
        pcl_total = np.array(pcl_total_dt)

        xyz_point_ant, xyz_color, pcd = self.reduccion_nube(pcl_total,vx_m)
    
        o3d.io.write_point_cloud("cloud_reconstruction_total"+str(cont)+".ply",pcd) 
        
        point_data = [[data_orb[0],data_orb[1],data_orb[2]],[data_orb[3],data_orb[4],data_orb[5]],[vx_m,0,0],min_detec,max_detec]
        pcd = o3d.geometry.PointCloud()
        pcd.points = o3d.utility.Vector3dVector(point_data)
        o3d.io.write_point_cloud("cloud_position"+str(cont)+".ply",pcd) 

        pc_rec = self.procesamiento_depth(xyz_point_ant , xyz_color)
        self.pub_rec.publish(pc_rec)
        
        cont += 1 

  def reduccion_nube(self, total, vx_m): 
      pcd = o3d.geometry.PointCloud()
      pcd.points = o3d.utility.Vector3dVector(total)
      pcd_down = o3d.voxel_down_sample(pcd, voxel_size=vx_m)
      xyz1 = np.asarray(pcd_down.points) 
      color = np.asarray(pcd_down.colors)       
      return(xyz1, color, pcd_down) 

  def unir_pcd(self, xyz1, negativo_xyz, a, b):
      if len(xyz1) > 0 and len(negativo_xyz) > 0:
         total = np.concatenate((xyz1, negativo_xyz), axis=0) 
      elif len(xyz1) == 0 :
         total = negativo_xyz
      elif len(negativo_xyz) == 0:
         total = xyz1
      return(total) 
      
  def procesamiento_depth(self, pcl_total, pcl_total_rgb):
     points = []
     for i in range(len(pcl_total)):
            x = pcl_total[i][0]
            y = pcl_total[i][1]
            z = pcl_total[i][2]
            r = 0
            g = 255
            b = 0
            a = 255
            rgb = struct.unpack('I', struct.pack('BBBB', r, g, b, a))[0]
            pt = [x, y, z, rgb]
            points.append(pt)
     fields = [PointField('x', 0, PointField.FLOAT32, 1),
          PointField('y', 4, PointField.FLOAT32, 1),
          PointField('z', 8, PointField.FLOAT32, 1),
          PointField('rgba', 12, PointField.UINT32, 1),
          ]
     header = Header()
     header.frame_id = "map"
     pc2 = pc.create_cloud(header, fields, points)
     pc2.header.stamp = rospy.Time.now()
     return(pc2)  

if __name__=='__main__':
    rospy.init_node('Reconstruction_node')
    instancia_reconstruction = RECONSTRUCCION()
    rospy.loginfo("inicio de nodo_reconstruction")
    rospy.spin()
