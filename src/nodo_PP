#!/usr/bin/env python
# -*- coding: utf-8 -*-
import roslib
import rospy
import math
import cv2
import numpy as np
np.seterr(divide='ignore', invalid='ignore')
import time
import os
import evaluation as eva
import regression as reg
import statistics
import ros_numpy
import open3d as o3d
import struct
import pandas as pd
import seaborn as sb
from sensor_msgs.msg import LaserScan
from sensor_msgs.msg import PointCloud2, PointField
from std_msgs.msg import Float32MultiArray
from math import pi
from datetime import datetime
from email.header import Header
from sensor_msgs import point_cloud2 as pc
from open3d.open3d.geometry import voxel_down_sample,estimate_normals

vx_m = 0.1

class PRE_POS(object):
   def __init__(self):#funci칩n inicial cada vez que corre el sistema y se ncarga de tomar los mensajes que vienen desde los sensores
     self.pub_PREPOS = rospy.Publisher("/point_cloud_PREPOS", PointCloud2, queue_size=4)
     self.sub = rospy.Subscriber("/camera/depth_registered/points" , PointCloud2, self.ptcloud2)#se subscribe a msg de tipo PointCloud2 del nodo openni la dirrecci칩n /camera/depth_registered/points


   def ptcloud2(self, msg):
     global inic_msg
     global inic_sec
     global inic_tot
     inic_sec = True
     inic_tot = True
     inic_msg = msg

     if inic_tot:
      global ang
      global pm
      global datos
      global conteo
      global tiempo_inicial
      global zona
      global vx_m
      global thres

      t_est_ini = time.time()

      if True:
        negativo_xyz = ros_numpy.point_cloud2.pointcloud2_to_xyz_array(inic_msg)
        size_pcl_in = len(negativo_xyz)
        negativo_xyz[:,[1,2,0]] = negativo_xyz[:,[0,1,2]]
        negativo_xyz[:,1] = -negativo_xyz[:,1]
        negativo_xyz[:,2] = -negativo_xyz[:,2]
        m_xyz = len(negativo_xyz)
        t_est = time.time()-t_est_ini

        '''reduccion de nube'''
        t_vx_ini = time.time()
        out_pcd = o3d.geometry.PointCloud()
        out_pcd.points = o3d.utility.Vector3dVector(negativo_xyz)
        pcd_down = voxel_down_sample(out_pcd, voxel_size=vx_m)#reduccion out_pcd#
        negativo_xyz = np.asarray(pcd_down.points)
        size_redu = len(negativo_xyz)
        t_vx = time.time()-t_vx_ini
        #print("********tama침o pcl 1",len(negativo_xyz))

        '''proyeccion pcl'''
        t_pc2_ini = time.time()
        print("********tama침o pcl client",len(negativo_xyz))
        pc_PP = self.procesamiento_depth(negativo_xyz)
        self.pub_PREPOS.publish(pc_PP)
        t_pc2 = time.time() - t_pc2_ini


   def procesamiento_depth(self, pcl_total):
       points = []
       for i in range(len(pcl_total)):
            x = pcl_total[i][0]
            y = pcl_total[i][1]
            z = pcl_total[i][2]
            r = 0#int(pcl_total_rgb[i][0])#int(x * 255.0)
            g = 0#int(pcl_total_rgb[i][1])#int(y * 255.0)
            b = 255#int(pcl_total_rgb[i][2])#int(z * 255.0)
            a = 255
            rgb = struct.unpack('I', struct.pack('BBBB', r, g, b, a))[0]
            #print hex(rgb)
            pt = [x, y, z, rgb]
            points.append(pt)
       fields = [PointField('x', 0, PointField.FLOAT32, 1),
          PointField('y', 4, PointField.FLOAT32, 1),
          PointField('z', 8, PointField.FLOAT32, 1),
          #PointField('rgb', 12, PointField.UINT32, 1),
          PointField('rgba', 12, PointField.UINT32, 1),
          ]
       header = Header()
       header.frame_id = "map"
       pc2 = pc.create_cloud(header, fields, points)
       pc2.header.stamp = rospy.Time.now()
       return(pc2)


if __name__=='__main__':
    rospy.init_node('nodo_PP')#crea el nodo 'pre_procesamiento' donde se ejecuta el codigo, y este queda anclado a rosmaster con este nombre
    instancia_PP = PRE_POS()#crea una instancia de la clase PRE_PROCESAMIENTO
    rospy.loginfo("inicio de nodo_PP")#mensajen en ROS de inicio del nodo
    cv2.destroyAllWindows()
    rospy.spin()#averiguar que es spin y como afecta
